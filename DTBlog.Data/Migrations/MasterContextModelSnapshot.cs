// <auto-generated />
using System;
using DTBlog.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DTBlog.Data.Migrations
{
    [DbContext(typeof(MasterContext))]
    partial class MasterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113");

            modelBuilder.Entity("DTBlog.Data.Model.AuthorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorBio");

                    b.Property<string>("AuthorFullName");

                    b.Property<byte[]>("AuthorImage");

                    b.Property<DateTime>("ChangedDate");

                    b.Property<int>("ChangedUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChangedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("DTBlog.Data.Model.MusicModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangedDate");

                    b.Property<int>("ChangedUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("MusicLink");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChangedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Musics");
                });

            modelBuilder.Entity("DTBlog.Data.Model.NewsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangedDate");

                    b.Property<int>("ChangedUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("NewsContent")
                        .IsRequired();

                    b.Property<byte[]>("NewsImage");

                    b.Property<bool>("NewsStatus");

                    b.Property<string>("NewsTitle")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChangedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("DTBlog.Data.Model.PostModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<DateTime>("ChangedDate");

                    b.Property<int>("ChangedUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("PostContent")
                        .IsRequired();

                    b.Property<byte[]>("PostImage");

                    b.Property<bool>("PostStatus");

                    b.Property<string>("PostTitle")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ChangedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DTBlog.Data.Model.QuotationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangedDate");

                    b.Property<int>("ChangedUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("QuoteContent")
                        .IsRequired();

                    b.Property<string>("QuoteFrom")
                        .IsRequired();

                    b.Property<byte[]>("QuoteImage");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChangedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("QuotationModel");
                });

            modelBuilder.Entity("DTBlog.Data.Model.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("IsSuperAdmin");

                    b.Property<string>("MailAddress")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DTBlog.Data.Model.AuthorModel", b =>
                {
                    b.HasOne("DTBlog.Data.Model.UserModel", "ChangedUser")
                        .WithMany("ChangeUserAuthor")
                        .HasForeignKey("ChangedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DTBlog.Data.Model.UserModel", "UserModel")
                        .WithMany("AuthorModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DTBlog.Data.Model.MusicModel", b =>
                {
                    b.HasOne("DTBlog.Data.Model.UserModel", "ChangedUser")
                        .WithMany("ChangeUserMusic")
                        .HasForeignKey("ChangedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DTBlog.Data.Model.UserModel", "UserModel")
                        .WithMany("MusicModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DTBlog.Data.Model.NewsModel", b =>
                {
                    b.HasOne("DTBlog.Data.Model.UserModel", "ChangedUser")
                        .WithMany("ChangeUserNews")
                        .HasForeignKey("ChangedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DTBlog.Data.Model.UserModel", "UserModel")
                        .WithMany("NewsModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DTBlog.Data.Model.PostModel", b =>
                {
                    b.HasOne("DTBlog.Data.Model.AuthorModel", "AuthorModel")
                        .WithMany("PostModels")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DTBlog.Data.Model.UserModel", "ChangedUser")
                        .WithMany("ChangeUserPost")
                        .HasForeignKey("ChangedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DTBlog.Data.Model.UserModel", "UserModel")
                        .WithMany("PostModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DTBlog.Data.Model.QuotationModel", b =>
                {
                    b.HasOne("DTBlog.Data.Model.UserModel", "ChangedUser")
                        .WithMany("ChangeUserQuot")
                        .HasForeignKey("ChangedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DTBlog.Data.Model.UserModel", "UserModel")
                        .WithMany("QuotationModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
